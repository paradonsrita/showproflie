@page "/reset-password"
@using QMS.Data.Entities
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager


<h3>ตั้งรหัสผ่านใหม่</h3>

@if (message != null)
{
    <div class="alert alert-info">@message</div>
}

<EditForm Model="resetPasswordModel" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>รหัสผ่านใหม่:</label>
        <InputText @bind-Value="resetPasswordModel.NewPassword" class="form-control" type="password" />
    </div>

    <div class="form-group">
        <label>ยืนยันรหัสผ่านใหม่:</label>
        <InputText @bind-Value="resetPasswordModel.ConfirmPassword" class="form-control" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">ตั้งรหัสผ่านใหม่</button>
</EditForm>

@code {
    private ResetPasswordModel resetPasswordModel = new();
    private string? message;

    [Parameter]
    public string Otp { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.RelativeOrAbsolute);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        Otp = query["otp"];

        if (!string.IsNullOrEmpty(Otp))
        {
            resetPasswordModel.otp = Otp;
            Console.WriteLine($"OTP received: {Otp}");
        }
        else
        {
            Console.WriteLine("OTP parameter is missing.");
        }

    }

    private async Task HandleResetPassword()
    {
        Console.WriteLine(resetPasswordModel.otp);
        
        var response = await Http.PostAsJsonAsync("https://localhost:44328/api/ResetPassword/resetpassword", resetPasswordModel);

        if (response.IsSuccessStatusCode)
        {
            message = "ตั้งรหัสผ่านใหม่เรียบร้อยแล้ว.";
            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = "เกิดข้อผิดพลาดในการตั้งรหัสผ่าน. กรุณาลองอีกครั้ง.";
            Console.WriteLine(response.StatusCode); // แสดงสถานะของการตอบกลับจาก API
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorContent); // แสดงข้อความแสดงข้อผิดพลาดที่ได้จาก API
        }
        
    }

    [Inject] private HttpClient Http { get; set; }

}