@page "/Register"
@using QMS.Models
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@inject HttpClient Http


<h1>ลงทะเบียน</h1>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="citizen_id_number">รหัสบัตรประชาชน</label>
        <InputText id="citizen_id_number" @bind-Value="model.citizen_id_number" class="form-control" />
        <ValidationMessage For="@(() => model.citizen_id_number)" />
    </div>
    <div class="form-group">
        <label for="firstname">ชื่อจริง</label>
        <InputText id="firstname" @bind-Value="model.firstname" class="form-control" />
        <ValidationMessage For="@(() => model.firstname)" />
    </div>
    <div class="form-group">
        <label for="lastname">นามสกุล</label>
        <InputText id="lastname" @bind-Value="model.lastname" class="form-control" />
        <ValidationMessage For="@(() => model.lastname)" />
    </div>
    <div class="form-group">
        <label for="user_email">อีเมล</label>
        <InputText id="user_email" @bind-Value="model.user_email" class="form-control" />
        <ValidationMessage For="@(() => model.user_email)" />
    </div>
    <div class="form-group">
        <label for="phone_number">เบอร์โทรศัพท์</label>
        <InputText id="phone_number" @bind-Value="model.phone_number" class="form-control" />
        <ValidationMessage For="@(() => model.phone_number)" />
    </div>
    <div class="form-group">
        <label for="password">รหัสผ่าน</label>
        <InputText id="password" type="password" @bind-Value="model.password" class="form-control" />
        <ValidationMessage For="@(() => model.password)" />
    </div>
    <div class="form-group">
        <label for="confirm_password">ยืนยันรหัสผ่าน</label>
        <InputText id="confirm_password" type="password" @bind-Value="model.confirm_password" class="form-control" />
        <ValidationMessage For="@(() => model.confirm_password)" />
    </div>

    <button type="submit" class="btn btn-primary mt-2">ลงทะเบียน</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private RegisterViewModel model = new RegisterViewModel();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            if (model.password != model.confirm_password)
            {
                errorMessage = "รหัสผ่านไม่ตรงกัน กรุณาลองใหม่";
                return;
            }

            // ส่งข้อมูลไปยัง API
            var response = await Http.PostAsJsonAsync("https://localhost:44328/api/LogicRegister/register", model);

            if (response.IsSuccessStatusCode)
            {
                // หากสำเร็จ นำทางไปยังหน้าที่ต้องการ
                NavigationManager.NavigateTo("/registration-successful");
            }
            else
            {
                // แสดงข้อผิดพลาดจาก API
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (InvalidOperationException ex)
        {
            // จัดการข้อผิดพลาดที่มาจากการตรวจสอบข้อมูลซ้ำ
            errorMessage = ex.Message;
        }
        
        catch (Exception ex)
        {
            // จัดการข้อผิดพลาดทั่วไป
            errorMessage = "เกิดข้อผิดพลาดที่ไม่คาดคิด กรุณาลองอีกครั้ง";
            Logger.LogError(ex, "Unexpected error.");
        }
    }
}
